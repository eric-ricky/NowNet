"use client";

import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Separator } from "@/components/ui/separator";
import axios from "axios";
import { ArrowLeft, Loader2 } from "lucide-react";
import Link from "next/link";
import { useSearchParams } from "next/navigation";
import { useEffect, useState } from "react";
import { toast } from "sonner";

const PaymentResponsePage = () => {
  const searchParams = useSearchParams();
  const orderTrackingId = searchParams.get("OrderTrackingId"); // generated by pesapal
  const orderMerchantReference = searchParams.get("OrderMerchantReference"); // unique transaction Id

  const [loading, setLoading] = useState(false);
  const [output, setOutput] = useState<any[]>();

  useEffect(() => {
    const handleProcessPayment = async () => {
      const toastId = toast.loading("Processing Payment", {
        id: "loadingProcessingPayment",
        style: { color: "black" },
      });

      try {
        setLoading(true);
        const res = await axios.post(`/api/payment/v2/get-payment-status`, {
          OrderTrackingId: orderTrackingId,
          OrderMerchantReference: orderMerchantReference,
        });
        const data = res.data;
        console.log("RES ====>", data);

        setOutput(Object.entries({ ...data.data, error: "" }));

        toast.dismiss(toastId);
      } catch (error) {
        console.log("Error ====>", error);
        toast.error("Error processing payment", {
          id: toastId,
          style: {
            color: "red",
          },
        });
      } finally {
        setLoading(false);
      }
    };
    handleProcessPayment();
  }, [orderTrackingId, orderMerchantReference]);

  return (
    <div className="flex flex-col">
      <div className="border-b border-t">
        <div className="flex h-16 items-center px-4 md:px-8">
          <Link href="/app" className="w-fit">
            <Button
              size={"sm"}
              variant={"outline"}
              className="border p-2 rounded-md text-muted-foreground"
            >
              <ArrowLeft size={18} className="mr-2" /> Back
            </Button>
          </Link>
        </div>
      </div>

      <div className="flex-1 space-y-4 p-4 md:p-8 pt-6 overflow-x-hidden">
        <div className="hidden w-[200px] h-20 last:grid place-items-center">
          <Loader2 size={40} className="text-blue-500 animate-spin" />
        </div>

        {!loading && (
          <Card className="w-fit">
            <CardHeader>
              <CardTitle>Transaction Details</CardTitle>
              <CardDescription>.</CardDescription>
            </CardHeader>
            <Separator />

            <CardContent className="pt-8">
              {output &&
                output.map((item, i) => (
                  <div key={i} className="flex items-center space-x-4 text-sm">
                    <div className="text-muted-foreground text-sm w-[150px] md:w-[200px] capitalize flex items-center">
                      <span className="flex-1">
                        {item[0].split("_").join(" ")}
                      </span>

                      <span className="ml-auto">:</span>
                    </div>
                    <div className="font-medium w-[100px] md:w-[200px] truncate">
                      {item[1]}
                    </div>
                  </div>
                ))}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
};

export default PaymentResponsePage;
